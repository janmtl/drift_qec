{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Fujiwara-Algoet conditions (FAC) for the complete positivity of a unital qubit channel:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 291,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "% matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "from mpl_toolkits.mplot3d import Axes3D\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from scipy.optimize import fmin_bfgs\n",
    "\n",
    "def Qx(w):\n",
    "    return np.array([[         1,          0,         0],\n",
    "                     [         0,  np.cos(w), np.sin(w)],\n",
    "                     [         0, -np.sin(w), np.cos(w)]])\n",
    "\n",
    "def Qz(w):\n",
    "    return np.array([[ np.cos(w), np.sin(w),          0],\n",
    "                     [-np.sin(w), np.cos(w),          0],\n",
    "                     [         0,         0,          1]])\n",
    "\n",
    "def PAULI_CHANNEL(px, py, pz):\n",
    "    M = np.diag([1-2*py-2*pz, 1-2*px-2*pz, 1-2*px-2*py])\n",
    "    return M\n",
    "\n",
    "def SURF(k, p):\n",
    "    S = PAULI_CHANNEL(k*p, 0, (1-k)*p)\n",
    "    return S\n",
    "\n",
    "def cost(q, S, X):\n",
    "    Q = np.reshape(q, (3,3))\n",
    "    C1 = np.linalg.norm(np.diag(np.dot(np.dot(Q, S), Q.T) - X)) ** 2\n",
    "    C2 = np.linalg.norm(np.dot(Q.T, Q) - np.eye(3)) ** 2\n",
    "    c = (C1 + 0.25 * C2)\n",
    "    return c\n",
    "\n",
    "def solveQhat(S, V):\n",
    "    X = (np.trace(S) - np.trace(V)) / 3.0 * np.eye(3) + np.diag(np.diag(V))\n",
    "    qopt = fmin_bfgs(lambda q: cost(q, S, X),\n",
    "                     np.random.random((9,1)),\n",
    "                     disp=False)\n",
    "    Qhat = np.reshape(qopt, (3, 3))\n",
    "    return Qhat\n",
    "\n",
    "class HistoryBank(object):\n",
    "    def __init__(self, Minit, decay_rate):\n",
    "        self.decay_rate = decay_rate\n",
    "        self.B = Minit\n",
    "    \n",
    "    def rotate(self, Q):\n",
    "        self.B = np.dot(np.dot(Q, self.B), Q.T)\n",
    "    \n",
    "    def insert(self, M):\n",
    "        self.B = (1-self.decay_rate) * M + self.decay_rate * self.B\n",
    "\n",
    "def Merr(err, n):\n",
    "    if err==\"x\":\n",
    "        return np.diag([1.0, 1.0-1.0/n, 1.0-1.0/n])\n",
    "    elif err==\"y\":\n",
    "        return np.diag([1.0-1.0/n, 1.0, 1.0-1.0/n])\n",
    "    elif err==\"z\":\n",
    "        return np.diag([1.0-1.0/n, 1.0-1.0/n, 1.0])\n",
    "    else:\n",
    "        return np.eye(3)\n",
    "    \n",
    "def test_FAC(s, tol=1e-6):\n",
    "    t1 = (1 + s[2] >= np.abs(s[0] + s[1]) - tol)\n",
    "    t2 = (1 - s[2] >= np.abs(s[0] - s[1]) - tol)\n",
    "    return t1 & t2\n",
    "\n",
    "def random_unital():\n",
    "    t = False\n",
    "    while not t:\n",
    "        s = np.random.random(3)\n",
    "        t = test_FAC(s)\n",
    "    return s\n",
    "\n",
    "def sample_error(Mval):\n",
    "    errs = [None, \"x\", \"y\", \"z\"]\n",
    "    mval = np.diag(Mval)\n",
    "    T = np.array([[0, 1, 1], [1, 0, 1], [1, 1, 0]])\n",
    "    Tinv = np.linalg.inv(T)\n",
    "    p = np.dot(Tinv, 1.0 - mval)\n",
    "    if np.any(p < 0):\n",
    "        print p\n",
    "    p_rates = np.r_[1-np.sum(p), p]\n",
    "    err_type = np.random.choice(4, 1, p=p_rates)[0]\n",
    "    return errs[err_type]\n",
    "\n",
    "k, p = 0.1, 0.1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Only use channels on the sphere inscribed inside the unital channel tetrahedron"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 292,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "C1: 0.000243165549945\n",
      "C2: 0.000813228193385\n"
     ]
    }
   ],
   "source": [
    "Shat = SURF(k, p)\n",
    "\n",
    "Qval, _ = np.linalg.qr(np.random.random((3,3)))\n",
    "Mval = np.dot(np.dot(Qval, SURF(k, p)), Qval.T)\n",
    "\n",
    "Qhat = solveQhat(Shat, Mval)\n",
    "C1 = np.linalg.norm(np.diag(np.dot(np.dot(Qhat, Shat), Qhat.T) - Mval))\n",
    "C2 = np.linalg.norm(np.dot(Qhat.T, Qhat) - np.eye(3))\n",
    "\n",
    "print \"C1: {}\".format(C1)\n",
    "print \"C2: {}\".format(C2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Let's try an evolution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 293,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-0.05116992 -0.02209747  0.27095685]\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "probabilities are not non-negative",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-293-400a4e18bc17>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     15\u001b[0m     \u001b[0;32mwhile\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0merr_type\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m         \u001b[0mn_step\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mn_step\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 17\u001b[0;31m         \u001b[0merr_type\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msample_error\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mMval\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     18\u001b[0m     \u001b[0mbank\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minsert\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mMerr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merr_type\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_step\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m     \u001b[0mQhat\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msolveQhat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mShat\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbank\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mB\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-291-a952c1c147eb>\u001b[0m in \u001b[0;36msample_error\u001b[0;34m(Mval)\u001b[0m\n\u001b[1;32m     71\u001b[0m         \u001b[0;32mprint\u001b[0m \u001b[0mp\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     72\u001b[0m     \u001b[0mp_rates\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mr_\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mp\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mp\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 73\u001b[0;31m     \u001b[0merr_type\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrandom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mchoice\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mp\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mp_rates\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     74\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0merrs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0merr_type\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     75\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mmtrand.pyx\u001b[0m in \u001b[0;36mmtrand.RandomState.choice (numpy/random/mtrand/mtrand.c:12151)\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: probabilities are not non-negative"
     ]
    }
   ],
   "source": [
    "k, p = 0.1, 0.1\n",
    "\n",
    "Qval, _ = np.linalg.qr(np.random.random((3,3)))\n",
    "Sval = SURF(k, p)\n",
    "Mval = np.dot(np.dot(Qval, Sval), Qval.T)\n",
    "\n",
    "Qhat = np.eye(3)\n",
    "Shat = SURF(k, p)\n",
    "Mhat = np.dot(np.dot(Qhat, Shat), Qhat.T)\n",
    "bank = HistoryBank(Mhat, 0.15)\n",
    "\n",
    "for step in range(100):\n",
    "    n_step = 1\n",
    "    err_type = None\n",
    "    while not err_type:\n",
    "        n_step = n_step + 1\n",
    "        err_type = sample_error(Mval)\n",
    "    bank.insert(Merr(err_type, n_step))\n",
    "    Qhat = solveQhat(Shat, bank.B)\n",
    "    C1 = np.dot(Qhat, Qhat.T) - np.eye(3)\n",
    "    C3 = np.dot(np.dot(Qhat, Shat), Qhat.T) - bank.B\n",
    "\n",
    "    bank.rotate(Qhat.T)\n",
    "    Mval = np.dot(np.dot(Qhat.T, Mval), Qhat)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 295,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Singular values: [ 0.98  0.82  0.8 ]\n",
      "[[-0.24356061  0.40991338  0.87900469]\n",
      " [-0.8825626   0.28215606 -0.37612658]\n",
      " [-0.40219582 -0.86738629  0.29305211]]\n",
      "Singular values: [ 0.98  0.82  0.8 ]\n",
      "[[-0.90561195  0.38003905  0.18824801]\n",
      " [-0.42268461 -0.77246289 -0.47396076]\n",
      " [-0.034709   -0.50879407  0.86018828]]\n",
      "Singular values: [ 0.98  0.82  0.8 ]\n",
      "[[-0.70653161  0.53842793 -0.4592477 ]\n",
      " [-0.69261304 -0.65931048  0.29256942]\n",
      " [-0.14525928  0.52479049  0.8387459 ]]\n",
      "Singular values: [ 0.98  0.82  0.8 ]\n",
      "[[-0.64500821  0.65661682  0.3909204 ]\n",
      " [-0.53396333 -0.02130542 -0.84523916]\n",
      " [-0.54666953 -0.75392336  0.36435147]]\n",
      "Singular values: [ 0.98  0.82  0.8 ]\n",
      "[[-0.7413761   0.57800429  0.34098756]\n",
      " [-0.4350317  -0.02704174 -0.90000898]\n",
      " [-0.51098816 -0.81558555  0.27149829]]\n",
      "Singular values: [ 0.98  0.82  0.8 ]\n",
      "[[-0.6025049   0.50738611  0.61607401]\n",
      " [-0.67606568  0.08578993 -0.73183009]\n",
      " [-0.42417337 -0.85743771  0.29133748]]\n",
      "Singular values: [ 0.98  0.82  0.8 ]\n",
      "[[-0.7268038  -0.19188009 -0.6594985 ]\n",
      " [-0.06294019 -0.93753899  0.34213912]\n",
      " [-0.68395524  0.29017697  0.66932993]]\n",
      "Singular values: [ 0.98  0.82  0.8 ]\n",
      "[[-0.64900942 -0.1956213  -0.73520002]\n",
      " [-0.63562205 -0.39160649  0.66530366]\n",
      " [-0.41805667  0.89909769  0.12981509]]\n",
      "Singular values: [ 0.98  0.82  0.8 ]\n",
      "[[-0.35706423  0.70564939 -0.6120164 ]\n",
      " [-0.92830923 -0.3407951   0.14866294]\n",
      " [-0.10366828  0.62122269  0.77674658]]\n",
      "Singular values: [ 0.98  0.82  0.8 ]\n",
      "[[-0.44247668  0.8966781   0.01351952]\n",
      " [-0.65118593 -0.31089733 -0.69231476]\n",
      " [-0.6165803  -0.31513686  0.72146898]]\n",
      "Singular values: [ 0.98  0.82  0.8 ]\n",
      "[[-0.71950807  0.48262786 -0.4993781 ]\n",
      " [-0.27215181 -0.85749648 -0.43661559]\n",
      " [-0.63893781 -0.17824179  0.74832369]]\n",
      "Singular values: [ 0.98  0.82  0.8 ]\n",
      "[[-0.34916254 -0.3816408  -0.85582464]\n",
      " [-0.26355933 -0.8364404   0.48052464]\n",
      " [-0.89923412  0.39334177  0.19146866]]\n",
      "Singular values: [ 0.98  0.82  0.8 ]\n",
      "[[-0.69974997 -0.04300793 -0.71309207]\n",
      " [-0.17200484 -0.95867822  0.22660629]\n",
      " [-0.6933717   0.28122304  0.66343748]]\n",
      "Singular values: [ 0.98  0.82  0.8 ]\n",
      "[[-0.82762653  0.52803319  0.1903031 ]\n",
      " [-0.39996726 -0.31696349 -0.85997694]\n",
      " [-0.39377723 -0.78785474  0.47352339]]\n",
      "Singular values: [ 0.98  0.82  0.8 ]\n",
      "[[-0.8674462   0.45011156 -0.21198272]\n",
      " [-0.29730671 -0.81058206 -0.50454479]\n",
      " [-0.39893083 -0.37464158  0.83695751]]\n",
      "Singular values: [ 0.98  0.82  0.8 ]\n",
      "[[-0.01236179  0.4582367  -0.88874423]\n",
      " [-0.78033614 -0.56018268 -0.27797638]\n",
      " [-0.62523811  0.69008296  0.36450352]]\n",
      "Singular values: [ 0.98  0.82  0.8 ]\n",
      "[[-0.58564915  0.81031506 -0.02011419]\n",
      " [-0.56154648 -0.42349884 -0.71085462]\n",
      " [-0.58453454 -0.40501635  0.7030513 ]]\n",
      "Singular values: [ 0.98  0.82  0.8 ]\n",
      "[[-0.30545844  0.93243426 -0.19303237]\n",
      " [-0.89473093 -0.35042531 -0.27687301]\n",
      " [-0.3258093   0.08813883  0.94131814]]\n",
      "Singular values: [ 0.98  0.82  0.8 ]\n",
      "[[-0.52933613  0.83791227 -0.13306499]\n",
      " [-0.35560577 -0.36151979 -0.86188629]\n",
      " [-0.77029073 -0.40890887  0.48933192]]\n",
      "Singular values: [ 0.98  0.82  0.8 ]\n",
      "[[-0.21866599  0.71326834 -0.66590799]\n",
      " [-0.88015599 -0.43881818 -0.1810084 ]\n",
      " [-0.4213201   0.54652253  0.72374202]]\n",
      "Singular values: [ 0.98  0.82  0.8 ]\n",
      "[[-0.26739467  0.835975   -0.47921382]\n",
      " [-0.72459183 -0.50227654 -0.47189508]\n",
      " [-0.63519035  0.22105219  0.74004672]]\n",
      "Singular values: [ 0.98  0.82  0.8 ]\n",
      "[[-0.57298479  0.81404004 -0.09501181]\n",
      " [-0.79461798 -0.58018307 -0.17880124]\n",
      " [-0.20067561 -0.0269523   0.97928692]]\n",
      "Singular values: [ 0.98  0.82  0.8 ]\n",
      "[[-0.30438703  0.69209702  0.65448473]\n",
      " [-0.78805136  0.20300304 -0.58117538]\n",
      " [-0.53509214 -0.69266983  0.4836165 ]]\n",
      "Singular values: [ 0.98  0.82  0.8 ]\n",
      "[[-0.99246143  0.11097725 -0.05200346]\n",
      " [-0.05258832 -0.76888977 -0.63721502]\n",
      " [-0.1107013  -0.62967656  0.76892955]]\n",
      "Singular values: [ 0.98  0.82  0.8 ]\n",
      "[[-0.23161502  0.78855315 -0.56968273]\n",
      " [-0.89323742 -0.40435061 -0.19653877]\n",
      " [-0.38533283  0.4633406   0.79801886]]\n",
      "Singular values: [ 0.98  0.82  0.8 ]\n",
      "[[-0.89116821  0.07426844 -0.44755271]\n",
      " [-0.03646505 -0.99504366 -0.09251166]\n",
      " [-0.45220518 -0.06612342  0.88945948]]\n",
      "Singular values: [ 0.98  0.82  0.8 ]\n",
      "[[-0.42257283  0.5820737  -0.6947103 ]\n",
      " [-0.86750469 -0.48170676  0.12407342]\n",
      " [-0.26242677  0.6550945   0.70850786]]\n",
      "Singular values: [ 0.98  0.82  0.8 ]\n",
      "[[-0.18140272  0.5272949  -0.83009225]\n",
      " [-0.82155981 -0.54518371 -0.16677593]\n",
      " [-0.54049286  0.65171682  0.5321021 ]]\n",
      "Singular values: [ 0.98  0.82  0.8 ]\n",
      "[[-0.89211345  0.18174819 -0.4136438 ]\n",
      " [-0.2271675  -0.97182     0.06293497]\n",
      " [-0.390549    0.15011156  0.90826097]]\n",
      "Singular values: [ 0.98  0.82  0.8 ]\n",
      "[[-0.50754078 -0.69461795 -0.50981198]\n",
      " [-0.02628082 -0.57892938  0.81495404]\n",
      " [-0.86122684  0.42702069  0.27557514]]\n",
      "Singular values: [ 0.98  0.82  0.8 ]\n",
      "[[-0.5003139  -0.71121689 -0.49381833]\n",
      " [-0.28932034 -0.40022603  0.86954751]\n",
      " [-0.81607582  0.57791839 -0.00553087]]\n",
      "Singular values: [ 0.98  0.82  0.8 ]\n",
      "[[-0.26062897  0.69512982 -0.66997543]\n",
      " [-0.95617182 -0.28177692  0.0796067 ]\n",
      " [-0.13344662  0.66135943  0.73810277]]\n",
      "Singular values: [ 0.98  0.82  0.8 ]\n",
      "[[-0.48597338  0.82397586 -0.29136516]\n",
      " [-0.45444582 -0.52300532 -0.72107173]\n",
      " [-0.74653122 -0.21801199  0.62861905]]\n",
      "Singular values: [ 0.98  0.82  0.8 ]\n",
      "[[-0.79643386  0.31273993 -0.51757786]\n",
      " [-0.4009177  -0.91382265  0.06475469]\n",
      " [-0.45272299  0.25907895  0.85318227]]\n",
      "Singular values: [ 0.98  0.82  0.8 ]\n",
      "[[-0.38895279  0.84844887 -0.35895717]\n",
      " [-0.58908861 -0.52862557 -0.61117069]\n",
      " [-0.70830102 -0.02625897  0.70542196]]\n",
      "Singular values: [ 0.98  0.82  0.8 ]\n",
      "[[-0.62710509  0.67826438  0.38300998]\n",
      " [-0.7450663  -0.37889857 -0.54891902]\n",
      " [-0.22719028 -0.62959773  0.74296115]]\n",
      "Singular values: [ 0.98  0.82  0.8 ]\n",
      "[[-0.1640942   0.97304063  0.16206488]\n",
      " [-0.43869928  0.07516505 -0.89548487]\n",
      " [-0.88352478 -0.21804162  0.41453807]]\n",
      "Singular values: [ 0.98  0.82  0.8 ]\n",
      "[[-0.81108739  0.34595026  0.47165206]\n",
      " [-0.52122799 -0.06155103 -0.85119496]\n",
      " [-0.26544045 -0.93623175  0.23024222]]\n",
      "Singular values: [ 0.98  0.82  0.8 ]\n",
      "[[-0.50125558  0.20840332 -0.8398279 ]\n",
      " [-0.37015921 -0.92891893 -0.00957985]\n",
      " [-0.78212851  0.30606808  0.54276821]]\n",
      "Singular values: [ 0.98  0.82  0.8 ]\n",
      "[[-0.30777685  0.78539705 -0.53705203]\n",
      " [-0.36180806 -0.61865831 -0.69739288]\n",
      " [-0.87998201 -0.02033163  0.47457169]]\n",
      "Singular values: [ 0.98  0.82  0.8 ]\n",
      "[[-0.17406456  0.96459589 -0.19813204]\n",
      " [-0.90716384 -0.23534696 -0.34880592]\n",
      " [-0.38308653  0.11902347  0.91601207]]\n",
      "Singular values: [ 0.98  0.82  0.8 ]\n",
      "[[-0.10633915  0.95199703  0.28704293]\n",
      " [-0.80748205  0.08577525 -0.5836226 ]\n",
      " [-0.58022816 -0.29384394  0.75959925]]\n",
      "Singular values: [ 0.98  0.82  0.8 ]\n",
      "[[-0.841647   -0.00604566 -0.53999424]\n",
      " [-0.22883188 -0.90173416  0.36675805]\n",
      " [-0.48914855  0.43224871  0.75755841]]\n",
      "Singular values: [ 0.98  0.82  0.8 ]\n",
      "[[-0.86110726 -0.38333028 -0.3339943 ]\n",
      " [-0.28937525 -0.17061524  0.94188768]\n",
      " [-0.41803858  0.907716    0.03599173]]\n",
      "Singular values: [ 0.98  0.82  0.8 ]\n",
      "[[-0.07765787  0.0900853  -0.99290175]\n",
      " [-0.50345619 -0.86314303 -0.03893554]\n",
      " [-0.86052375  0.49685889  0.11238385]]\n",
      "Singular values: [ 0.98  0.82  0.8 ]\n",
      "[[-0.80764583 -0.138524   -0.57316605]\n",
      " [-0.46711344 -0.44293127  0.76525612]\n",
      " [-0.3598795   0.88578948  0.29302517]]\n",
      "Singular values: [ 0.98  0.82  0.8 ]\n",
      "[[-0.08885765  0.96725151 -0.23775792]\n",
      " [-0.73473188 -0.22481884 -0.64001996]\n",
      " [-0.67251274  0.11781765  0.7306474 ]]\n",
      "Singular values: [ 0.98  0.82  0.8 ]\n",
      "[[-0.10646355  0.81938892 -0.56326487]\n",
      " [-0.85418286 -0.3653331  -0.37000454]\n",
      " [-0.50895692  0.4417392   0.73880263]]\n",
      "Singular values: [ 0.98  0.82  0.8 ]\n",
      "[[-0.38865285  0.92126097  0.01507287]\n",
      " [-0.07053182 -0.01343639 -0.99741903]\n",
      " [-0.9186807  -0.38871287  0.07020031]]\n",
      "Singular values: [ 0.98  0.82  0.8 ]\n",
      "[[-0.82824801  0.1882802  -0.52778385]\n",
      " [-0.21175411 -0.97718713 -0.01629468]\n",
      " [-0.51881155  0.09826436  0.8492224 ]]\n",
      "Singular values: [ 0.98  0.82  0.8 ]\n"
     ]
    }
   ],
   "source": [
    "M = SURF(k, p)\n",
    "s = np.linalg.svd(M)[1]\n",
    "print \"Singular values: {}\".format(s)\n",
    "\n",
    "for j in range(50):\n",
    "    Q, _ = np.linalg.qr(np.random.random((3,3)))\n",
    "    M = np.dot(np.dot(Q, M), Q.T)\n",
    "    s = np.linalg.svd(M)[1]\n",
    "    print Q\n",
    "    print \"Singular values: {}\".format(s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 243,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.99,  0.  ,  0.  ],\n",
       "       [ 0.  ,  0.89,  0.  ],\n",
       "       [ 0.  ,  0.  ,  0.9 ]])"
      ]
     },
     "execution_count": 243,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Mhat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "mval = np.diag(Mval)\n",
    "T = np.array([[ 0.0, -1.0, -1.0],\n",
    "              [-1.0,  0.0, -1.0],\n",
    "              [-1.0, -1.0,  0.0]])\n",
    "p = np.dot(np.linalg.inv(T), mval - np.ones(3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 209,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_FAC(np.linalg.eig(Mval)[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The error above is a broken unitality condition"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0.33868980+0.17241381j,  0.33868980-0.17241381j,  0.33407937+0.j        ])"
      ]
     },
     "execution_count": 182,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.linalg.eig(bank.Mhat())[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.95300547722350182"
      ]
     },
     "execution_count": 178,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.sum(np.linalg.eig(Mval)[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
